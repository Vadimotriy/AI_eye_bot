from io import BytesIO
from PIL import Image

from aiogram import types, F, Router, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from bot.bot import AI
from database.constants import *
from handlers.queue import AsyncQueue
from database.users_info import *

router = Router()
quque = AsyncQueue()


def main():
    @router.message(F.text, Command('help'))
    async def start(message: types.Message):
        await message.answer(text="—Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n\n"
                                  "<b>Nums Detector</b> –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ü–∏—Ñ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –Ω—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∞\n"
                                  "<b>—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ</b> - —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–±—ä–µ–∫—Ç—ã, "
                                  "–∫–æ—Ç–æ—Ä—ã–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω—ã –Ω–∞ —Ñ–æ—Ç–æ\n"
                                  "<b>—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ</b> - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —è–∑—ã–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —ç—Ç–∏—Ö —è–∑—ã–∫–∞—Ö —Å —Ñ–æ—Ç–æ")
    # /start
    @router.message(F.text, Command('start'))
    async def start(message: types.Message):
        print(message.from_user.id)

        if message.from_user.id in ADMINS:
            buttons = BUTTONS[:] + ['‚öôÔ∏è–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨‚öôÔ∏è']
        else:
            buttons = BUTTONS[:]

        builder = ReplyKeyboardBuilder()
        for i in buttons:
            builder.add(types.KeyboardButton(text=i))
        builder.adjust(1)

        text = (f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}!\n\n –Ø - AI Eye bot, —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!\n'
                f'–û –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /help.\n\n –í—Å—ë –ø—Ä–æ—Å—Ç–æ! üòé')

        await message.answer(text=text, reply_markup=builder.as_markup(resize_keyboard=True))

    # button 1
    @router.message(StateFilter(None), F.text == "—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ")
    async def chooser(message: types.Message, state: FSMContext):
        await message.answer(
            text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:"
        )
        await state.set_state(PhotoChooser.photo_sending)

    @router.message(PhotoChooser.photo_sending, F.photo)
    async def chooser(message: types.Message, state: FSMContext, bot: Bot):
        await message.bot.send_chat_action(message.chat.id, 'typing')
        image = BytesIO()
        await bot.download(message.photo[-1], destination=image)
        try:
            result = AI.get_tags(image)
            print(result)

            await message.answer(result)

        except Exception as e:
            print(e)
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.")

        await state.clear()

    # –û—à–∏–±–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    @router.message(PhotoChooser.photo_sending)
    async def chooser_incorrectly(message: types.Message):
        await message.answer(
            text="–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ!"
        )

    # button2
    @router.message(StateFilter(None), F.text == "Nums Detector")
    async def chooser(message: types.Message, state: FSMContext):
        await message.answer(
            text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:"
        )
        await state.set_state(NumberPhoto.photo_send)

    @router.message(NumberPhoto.photo_send, F.photo)
    async def chooser(message: types.Message, state: FSMContext, bot: Bot):
        image = BytesIO()
        await bot.download(message.photo[-1], destination=image)

        res = AI.predict_nums(image, False)
        text = ''

        for key, val in sorted(list(res.items()), key=lambda x: x[1]):
            text += f"{key} - {round(float(val * 100), 2)}%\n"

        await message.answer(text=text)
        await state.clear()

    @router.message(NumberPhoto.photo_send)
    async def chooser_incorrectly(message: types.Message):
        await message.answer(
            text="–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ!"
        )

    @router.message(StateFilter(None), F.text == "—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ")
    async def chooser(message: types.Message, state: FSMContext):
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text=f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤",
            callback_data=f'—Å–ø–∏—Å–æ–∫'))
        sr = savedones(message.from_user.id)
        await message.answer(
            f'''–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ (–¥–æ —Ç—Ä–µ—Ö –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {sr}\n''',
            reply_markup=builder.as_markup())
        await state.set_state(textphoto.langchoose)

    @router.message(textphoto.langchoose, F.text == "/skip")
    async def chooser(message: types.Message, state: FSMContext):
        txt = esh(message.from_user.id).split(' ')
        await state.update_data(langs=txt)
        await message.answer(f"–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")
        await state.set_state(textphoto.photo_snd)

    @router.message(textphoto.langchoose, F.text)
    async def chooser(message: types.Message, state: FSMContext, bot: Bot):
        txt = message.text.split(' ')
        txt = txt if len(txt) <= 3 else txt[:3]
        flag = True
        for el in txt:
            if el.title() not in LANGUAGES_FOR_PHOTOES.keys():
                await message.answer(f"–¢–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ! - {el}")
                flag = False
        if flag:
            langs = ' '.join(txt)
            savedata(message.from_user.id, langs)
            await state.update_data(langs=txt)
            await message.answer(f"–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")
            await state.set_state(textphoto.photo_snd)

    @router.message(textphoto.langchoose)
    async def chooser_incorrectly(message: types.Message):
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤!"
        )

    @router.message(textphoto.photo_snd, F.photo)
    async def chooser(message: types.Message, state: FSMContext, bot: Bot):
        await message.bot.send_chat_action(message.chat.id, 'typing')
        image = BytesIO()
        await bot.download(message.photo[-1], destination=image)
        image = Image.open(image)

        langs = await state.get_data()
        langs = langs['langs']

        await quque.add_task(message.from_user.id, image, langs)
        await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å. –ú—ã –ø—Ä–∏—à–ª–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤!")

        await state.clear()

    # –û—à–∏–±–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    @router.message(textphoto.photo_snd)
    async def chooser_incorrectly(message: types.Message):
        await message.answer(
            text="–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ!"
        )


main()
